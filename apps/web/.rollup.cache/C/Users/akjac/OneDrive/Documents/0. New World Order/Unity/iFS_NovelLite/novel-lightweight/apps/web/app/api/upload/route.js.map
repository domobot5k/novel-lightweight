{"version":3,"file":"route.js","sourceRoot":"","sources":["route.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,cAAc,CAAC;AACnC,OAAO,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAE3C,MAAM,CAAC,MAAM,OAAO,GAAG,MAAM,CAAC;AAE9B,MAAM,CAAC,KAAK,UAAU,IAAI,CAAC,GAAY;IACrC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE;QACtC,OAAO,IAAI,QAAQ,CACjB,4EAA4E,EAC5E;YACE,MAAM,EAAE,GAAG;SACZ,CACF,CAAC;KACH;IAED,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,EAAE,CAAC;IAC5B,MAAM,QAAQ,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,UAAU,CAAC;IACpE,MAAM,WAAW,GAAG,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,YAAY,CAAC;IACpE,MAAM,QAAQ,GAAG,IAAI,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAEjD,iEAAiE;IACjE,MAAM,SAAS,GAAG,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC;QAC3C,CAAC,CAAC,QAAQ;QACV,CAAC,CAAC,GAAG,QAAQ,GAAG,QAAQ,EAAE,CAAC;IAC7B,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,SAAS,EAAE,IAAI,EAAE;QACtC,WAAW;QACX,MAAM,EAAE,QAAQ;KACjB,CAAC,CAAC;IAEH,OAAO,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACjC,CAAC","sourcesContent":["import { put } from \"@vercel/blob\";\r\nimport { NextResponse } from \"next/server\";\r\n\r\nexport const runtime = \"edge\";\r\n\r\nexport async function POST(req: Request) {\r\n  if (!process.env.BLOB_READ_WRITE_TOKEN) {\r\n    return new Response(\r\n      \"Missing BLOB_READ_WRITE_TOKEN. Don't forget to add that to your .env file.\",\r\n      {\r\n        status: 401,\r\n      },\r\n    );\r\n  }\r\n\r\n  const file = req.body || \"\";\r\n  const filename = req.headers.get(\"x-vercel-filename\") || \"file.txt\";\r\n  const contentType = req.headers.get(\"content-type\") || \"text/plain\";\r\n  const fileType = `.${contentType.split(\"/\")[1]}`;\r\n\r\n  // construct final filename based on content-type if not provided\r\n  const finalName = filename.includes(fileType)\r\n    ? filename\r\n    : `${filename}${fileType}`;\r\n  const blob = await put(finalName, file, {\r\n    contentType,\r\n    access: \"public\",\r\n  });\r\n\r\n  return NextResponse.json(blob);\r\n}\r\n"]}