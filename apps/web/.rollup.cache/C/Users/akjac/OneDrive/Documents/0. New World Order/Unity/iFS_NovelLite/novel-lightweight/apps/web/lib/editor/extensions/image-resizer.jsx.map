{"version":3,"file":"image-resizer.jsx","sourceRoot":"","sources":["image-resizer.tsx"],"names":[],"mappings":"AAAA,OAAO,QAAQ,MAAM,gBAAgB,CAAC;AAEtC,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE;IACzC,MAAM,eAAe,GAAG,GAAG,EAAE;QAC3B,MAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CACtC,2BAA2B,CACR,CAAC;QACtB,IAAI,SAAS,EAAE;YACb,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC;YACzC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;gBACvB,GAAG,EAAE,SAAS,CAAC,GAAG;gBAClB,KAAK,EAAE,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBACtD,MAAM,EAAE,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;aACzD,CAAC,CAAC;YACH,MAAM,CAAC,QAAQ,CAAC,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SAClD;IACH,CAAC,CAAC;IAEF,OAAO,CACL,EACE;MAAA,CAAC,QAAQ,CACP,MAAM,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,2BAA2B,CAAQ,CAAC,CACnE,SAAS,CAAC,CAAC,IAAI,CAAC,CAChB,MAAM,CAAC,CAAC,KAAK,CAAC;IACd,wBAAwB;IACxB,IAAI,CAAC,CAAC,KAAK,CAAC,CACZ,YAAY,CAAC,CAAC,CAAC,CAAC;IAChB,+DAA+D;IAC/D,SAAS,CAAC,CAAC,IAAI,CAAC;IAChB,cAAc;IACd,4DAA4D;IAC5D,SAAS,CAAC,CAAC,IAAI,CAAC,CAChB,cAAc,CAAC,CAAC,CAAC,CAAC,CAClB,QAAQ,CAAC,CAAC,CAAC,EACT,MAAM,EACN,KAAK,EACL,MAAM;QACN,QAAQ;QACR,KAAK,GAIJ,EAAE,EAAE;YACL,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,MAAO,CAAC,KAAK,CAAC,KAAK,GAAG,GAAG,KAAK,IAAI,CAAC,CAAC;YACjD,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,MAAO,CAAC,KAAK,CAAC,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,CAAC;QACrD,CAAC,CAAC;IACF,4CAA4C;IAC5C,WAAW,CAAC,CAAC,GAAG,EAAE;YAChB,eAAe,EAAE,CAAC;QACpB,CAAC,CAAC;IACF,cAAc;IACd,4DAA4D;IAC5D,QAAQ,CAAC,CAAC,IAAI,CAAC,CACf,aAAa,CAAC,CAAC,CAAC,CAAC;IACjB,oCAAoC;IACpC,gBAAgB,CAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAC7B,OAAO,CAAC,CAAC,CAAC,EACR,MAAM;QACN,SAAS;QACT,QAAQ;QACR,SAAS;QACT,SAAS,GAGR,EAAE,EAAE;YACL,MAAO,CAAC,KAAK,CAAC,SAAS,GAAG,SAAS,CAAC;QACtC,CAAC,CAAC,EAEN;IAAA,GAAG,CACJ,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import Moveable from \"react-moveable\";\r\n\r\nexport const ImageResizer = ({ editor }) => {\r\n  const updateMediaSize = () => {\r\n    const imageInfo = document.querySelector(\r\n      \".ProseMirror-selectednode\"\r\n    ) as HTMLImageElement;\r\n    if (imageInfo) {\r\n      const selection = editor.state.selection;\r\n      editor.commands.setImage({\r\n        src: imageInfo.src,\r\n        width: Number(imageInfo.style.width.replace(\"px\", \"\")),\r\n        height: Number(imageInfo.style.height.replace(\"px\", \"\")),\r\n      });\r\n      editor.commands.setNodeSelection(selection.from);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Moveable\r\n        target={document.querySelector(\".ProseMirror-selectednode\") as any}\r\n        container={null}\r\n        origin={false}\r\n        /* Resize event edges */\r\n        edge={false}\r\n        throttleDrag={0}\r\n        /* When resize or scale, keeps a ratio of the width, height. */\r\n        keepRatio={true}\r\n        /* resizable*/\r\n        /* Only one of resizable, scalable, warpable can be used. */\r\n        resizable={true}\r\n        throttleResize={0}\r\n        onResize={({\r\n          target,\r\n          width,\r\n          height,\r\n          // dist,\r\n          delta,\r\n        }: // direction,\r\n        // clientX,\r\n        // clientY,\r\n        any) => {\r\n          delta[0] && (target!.style.width = `${width}px`);\r\n          delta[1] && (target!.style.height = `${height}px`);\r\n        }}\r\n        // { target, isDrag, clientX, clientY }: any\r\n        onResizeEnd={() => {\r\n          updateMediaSize();\r\n        }}\r\n        /* scalable */\r\n        /* Only one of resizable, scalable, warpable can be used. */\r\n        scalable={true}\r\n        throttleScale={0}\r\n        /* Set the direction of resizable */\r\n        renderDirections={[\"w\", \"e\"]}\r\n        onScale={({\r\n          target,\r\n          // scale,\r\n          // dist,\r\n          // delta,\r\n          transform,\r\n        }: // clientX,\r\n        // clientY,\r\n        any) => {\r\n          target!.style.transform = transform;\r\n        }}\r\n      />\r\n    </>\r\n  );\r\n};\r\n"]}