{"version":3,"file":"custom-keymap.js","sourceRoot":"","sources":["custom-keymap.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAczC,MAAM,YAAY,GAAG,SAAS,CAAC,MAAM,CAAC;IACpC,IAAI,EAAE,cAAc;IAEpB,WAAW;QACT,OAAO;YACL,8BAA8B,EAC5B,GAAG,EAAE,CACL,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAE;gBACvB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;gBACzB,MAAM,EAAE,EAAE,EAAE,GAAG,KAAK,CAAC;gBACrB,MAAM,YAAY,GAAG,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBAChD,MAAM,UAAU,GAAG,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;gBAC1C,OAAO,QAAQ,CAAC,gBAAgB,CAAC;oBAC/B,IAAI,EAAE,YAAY;oBAClB,EAAE,EAAE,UAAU;iBACf,CAAC,CAAC;YACL,CAAC;SACJ,CAAC;IACJ,CAAC;IAED,oBAAoB;QAClB,OAAO;YACL,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE;gBACtB,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;gBACzB,MAAM,EAAE,EAAE,EAAE,GAAG,KAAK,CAAC;gBACrB,MAAM,iBAAiB,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC;gBAC5C,MAAM,eAAe,GAAG,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC;gBACxC,MAAM,YAAY,GAAG,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;gBAChD,MAAM,UAAU,GAAG,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC;gBAC1C,MAAM,iDAAiD,GACrD,iBAAiB,GAAG,YAAY,IAAI,eAAe,GAAG,UAAU,CAAC;gBACnE,IAAI,iDAAiD,EAAE;oBACrD,MAAM,CAAC,KAAK,EAAE,CAAC,8BAA8B,EAAE,CAAC,GAAG,EAAE,CAAC;oBACtD,OAAO,IAAI,CAAC;iBACb;gBACD,OAAO,KAAK,CAAC;YACf,CAAC;SACF,CAAC;IACJ,CAAC;CACF,CAAC,CAAC;AAEH,eAAe,YAAY,CAAC","sourcesContent":["import { Extension } from \"@tiptap/core\";\r\n\r\ndeclare module \"@tiptap/core\" {\r\n  // eslint-disable-next-line no-unused-vars\r\n  interface Commands<ReturnType> {\r\n    customkeymap: {\r\n      /**\r\n       * Select text between node boundaries\r\n       */\r\n      selectTextWithinNodeBoundaries: () => ReturnType;\r\n    };\r\n  }\r\n}\r\n\r\nconst CustomKeymap = Extension.create({\r\n  name: \"CustomKeymap\",\r\n\r\n  addCommands() {\r\n    return {\r\n      selectTextWithinNodeBoundaries:\r\n        () =>\r\n        ({ editor, commands }) => {\r\n          const { state } = editor;\r\n          const { tr } = state;\r\n          const startNodePos = tr.selection.$from.start();\r\n          const endNodePos = tr.selection.$to.end();\r\n          return commands.setTextSelection({\r\n            from: startNodePos,\r\n            to: endNodePos,\r\n          });\r\n        },\r\n    };\r\n  },\r\n\r\n  addKeyboardShortcuts() {\r\n    return {\r\n      \"Mod-a\": ({ editor }) => {\r\n        const { state } = editor;\r\n        const { tr } = state;\r\n        const startSelectionPos = tr.selection.from;\r\n        const endSelectionPos = tr.selection.to;\r\n        const startNodePos = tr.selection.$from.start();\r\n        const endNodePos = tr.selection.$to.end();\r\n        const isCurrentTextSelectionNotExtendedToNodeBoundaries =\r\n          startSelectionPos > startNodePos || endSelectionPos < endNodePos;\r\n        if (isCurrentTextSelectionNotExtendedToNodeBoundaries) {\r\n          editor.chain().selectTextWithinNodeBoundaries().run();\r\n          return true;\r\n        }\r\n        return false;\r\n      },\r\n    };\r\n  },\r\n});\r\n\r\nexport default CustomKeymap;\r\n"]}